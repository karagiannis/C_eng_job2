///*
// /*
// * sensor.c
// *
// *  Created on: 28 dec 2016
// *      Author: root
// */

#include "sensor.h"

void queue_init(QUEUE *q)
{
    memset(q,0,sizeof(QUEUE)); //Zeroing the array
    q->rindex = 0;//Probably un-necessay to do this, because of the above line
    q->windex = 0;
    q->numitems = 0;
}

alt_32 queue_enqueue(QUEUE *q, alt_32 item)
{
    alt_u32 num_items = q->numitems;
    //int* temp_array;
    alt_32 temp_array[QUEUESIZE];
    int i;
    memset(temp_array,0,sizeof(temp_array));//Zeroing just for bughunt

    if(num_items < QUEUESIZE)           //Check to see if the queue is not filled
    {
        //temp_array = (int *)calloc(num_items,sizeof(int));//Allocate temp array with size equal to the content size of the queue
        for(i = 0; i < num_items; i++)
            temp_array[i]= q->items[i];       //Copy the queue to temp array

        q->items[0] = item;                    //Insert the new item in the queue, always at index 0

        for ( i = 1; i < num_items +1; i++)     //Copy back the items from temp array
            q->items[i] = temp_array[i-1];
        //free(temp_array);                             //Dispose the temp array
        q->numitems++;                          //increment the number of items
        q->rindex++;                            //Increment the queue pointer so it points to the next free position in the queue
        return 1;                               //The enqueue succeeded
    }
    else return 0;          //The queue is filled, cannot insert more

}

alt_32 queue_dequeue(QUEUE *q)
{
    alt_u32 num_items = q->numitems;

    if (! num_items == 0)// The queue contains items
    {
        q->rindex--; //Decrement the end pointer because it points to a at the first empty position in the FIFO
         q->numitems--;                 //Decrement the number of items in the queue
         return 1;                      //Return success because the dequeing succeeded/ the queue was not empty
    }
    else return 0;          //The queue is empty, nothing can be dequeued


}


void queue_print(const QUEUE *q)
{
    int i = 0;
    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first
#ifdef DEBUG
        alt_printf("%d\n", q->items[i] );
#endif
    }
}
void queue_print_screen( const QUEUE *q, const alt_u32 x_origo, const  alt_u32 y_origo, alt_32 normalization, alt_32 offset, const alt_u32 rgb, SENSOR_OBJECT* sensor_obj_ptr){
	 int i = 0;
	 int j;
	 alt_32 mean = 0;
	 alt_32 sum = 0;
	 alt_32 value;



	 // For all measusrement values...
	    for (i = q->numitems-1; i>= 0; i--){  //print in FIFO order, oldest first

#ifdef DEBUG
	        alt_printf("Un-normalized %d\n normalized %d\n", q->items[i],q->items[i]/normalization );
#endif
	        j = q->numitems-1 -i;
	        sum = sum + q->items[i]; // calculate the sum of all measurements
#ifdef DEBUG
	        alt_printf("j%d\n",j);
#endif

	        for(int k = 1; k < 55;k++)
	        	print_pix(x_origo + j, y_origo-k,0);//Blank out previous measurement

	        print_pix(x_origo + j, y_origo,7);//Fix coordinate system line from previous blanking
	        sensor_obj_ptr->draw_graph_axes(sensor_obj_ptr); // Redraw of graph axes just for sure. Don't need to

	        value = offset + (alt_32)(q->items[i]/normalization); //Add offset and normalize each measurement value

	        if(value > 40) //Roof each value
	        	value = 40;
	        if (value < 0)//Floor each value
	          value = 0;

	        print_pix(x_origo + j,y_origo-value,rgb);  //Print the value on screen as a dot

	    }
	    mean = sum/q->numitems;// calculate the mean
	    alt_32 offs = 25 - (alt_32)(mean/normalization);  //Calculate offset so that graph stays in the middle
	    sensor_obj_ptr->offset = offs;    //update offset member variable

	    //Print the last value as a number on screen so that ones sees the instantaneous measurement
	    	        alt_32  bcd = i2bcd(abs(q->items[0]));
	    	        if(q->items[0] & 0x80000000)//negative
	    	        	print_char(x_origo +24, y_origo+30,4,0,'-');

	    	        	char c = (char)((bcd & 0xF000) >>12);
	    	        	short s = (short) c +48;
	    	        	print_char(x_origo +30, y_origo+30,4,0,(char)s);

	    	        	c = (char)((bcd & 0x0F00) >>8);
	    	        	s = (short) c +48;
	    	        	print_char(x_origo +38, y_origo+30,4,0,(char)s);

	    	        	c = (char)((bcd & 0x0F0) >>4);
	    	        	s = (short) c +48;
	    	        	print_char(x_origo +46, y_origo+30,4,0,(char)s);

	    	        	c = (char)(bcd & 0x0F);
	    	        	s = (short) c +48;
	    	        	print_char(x_origo +54, y_origo+30,4,0,(char)s);
}



void read_temp(QUEUE *q){
	ADC_INIT;
		alt_u32 temp = ADC_READ_TEMP;
		if(queue_enqueue(q,temp))// If I can enqueue the measurement
			do_nothing();	//then do nothing
						else{
							queue_dequeue(q);// else throw the oldest measurement point
							queue_enqueue(q,temp);//and then enqueue the newest
						}
		//alt_printf("nu");
#ifdef DEBUG
		 queue_print(q);
#endif
}
void read_light(QUEUE *q){
	ADC_INIT;
			alt_u32 light = ADC_READ_PHOTO;
			if(queue_enqueue(q,light)) //If I can queue...
				do_nothing();		//then Do nothing
							else{
								queue_dequeue(q); //else dequeue
								queue_enqueue(q,light); //and then enqueue
			//alt_printf("printar nu");
								}
#ifdef DEBUG
		 queue_print(q);
#endif
}
/************************************************/
void config_time_base(alt_u32 time_base, SENSOR_OBJECT* sensor_obj_ptr){
	 sensor_obj_ptr->time_base = time_base;
}
void init_measurement(SENSOR_OBJECT* sensor_obj_ptr){
	queue_init(sensor_obj_ptr->q); //Zeroing the queue
	sensor_obj_ptr->draw_graph_axes(sensor_obj_ptr); //Draw graph axes
}

void draw_graph(const SENSOR_OBJECT* sensor_obj_ptr){
	//Draws the graph axes and prints the sensor description
	print_char(sensor_obj_ptr->x_origo +55,sensor_obj_ptr->y_origo -3,7,0,'>');
		print_hline(sensor_obj_ptr->x_origo,sensor_obj_ptr->y_origo,60,7);

		print_char(sensor_obj_ptr->x_origo -4,sensor_obj_ptr->y_origo -45,7,0,'^');
		print_vline(sensor_obj_ptr->x_origo-1,sensor_obj_ptr->y_origo -45,45,7);

		print_str(sensor_obj_ptr->x_origo -20, sensor_obj_ptr->y_origo +10,7,sensor_obj_ptr->description);
}

void update_graph( SENSOR_OBJECT* sensor_obj_ptr){
#ifdef DEBUG
	queue_print(sensor_obj->q);
#endif
	queue_print_screen(sensor_obj_ptr->q,
			sensor_obj_ptr->x_origo,
			sensor_obj_ptr->y_origo,
			sensor_obj_ptr->normalization_factor,
			sensor_obj_ptr->offset,
			sensor_obj_ptr->rgb,sensor_obj_ptr );
}
void read_accelerometerX(QUEUE *q)
{
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
		spi_command_tx[2] = 0x02; // go bit value

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
		spi_command_tx[1] = 0x08; // Address of the data registers


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
								  2, spi_command_tx,
								  3, (alt_u8 *)&accel_data,
								  0);
#ifdef DEBUG
			alt_printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_x = 0;
		accel_x = (alt_32)accel_data.x;

		if(queue_enqueue(q,accel_x))// If I can queue
			do_nothing();									//then do nothing
				else{
					queue_dequeue(q); //dequeue the oldest element
					queue_enqueue(q,accel_x);//and then enqueue
				}
}
void do_nothing(void){

}
/*
void read_accelerometerY(QUEUE *q)
{
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
		spi_command_tx[2] = 0x02; // go bit value

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
		spi_command_tx[1] = 0x08; // Address of the data registers


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
								  2, spi_command_tx,
								  3, &accel_data,
								  0);
#ifdef DEBUG
			alt_printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_y = 0;
		accel_y = (alt_32)accel_data.y;

		if(queue_enqueue(q,accel_y))
						;
				else{
					queue_dequeue(q);
					queue_enqueue(q,accel_y);
				}
}

void read_accelerometerZ(QUEUE *q)
{
	ACCELEROMETER accel_data;
	alt_u8 spi_command_tx[2] = {0x0B, 0x00}; //, 0x00, 0x00}; // read one register from address 0x00
	alt_u8 spi_command_rx[4] = {0xB,0,0,0};
	// ------------------------------------------ Init SPI
		spi_command_tx[0] = WRITE_COMMAND; // write command
		spi_command_tx[1] = 0x2D; // Address 0x2D (go bit location)
		spi_command_tx[2] = 0x02; // go bit value

		alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
							  3, spi_command_tx,
							  0, spi_command_rx,
							  0);
	// ------------------------------------------ Read SPI
		spi_command_tx[0] = READ_COMMAND; // read command
		spi_command_tx[1] = 0x08; // Address of the data registers


			alt_avalon_spi_command( ACCELEROMETER_SPI_BASE, 0,
								  2, spi_command_tx,
								  3, &accel_data,
								  0);
#ifdef DEBUG
			alt_printf("X:%d\t Y:%d\t Z:%d\t\n",accel_data.x, accel_data.y, accel_data.z);
#endif

		alt_32 accel_z = 0;
		accel_z = (alt_32)accel_data.z;

		if(queue_enqueue(q,accel_z))
						;
				else{
					queue_dequeue(q);
					queue_enqueue(q,accel_z);
				}
}

*/
