/*
 * main.c
 *
 *  Created on: 31 dec 2016
 *      Author: root
 */

/*
 * TEIS AB
 * C-eng job
 * Programmet körs på en BeMicro10
 *
 * Programmets uppgift är att läsa av sensorer på kortet och presentera
 * grafer med sensordata på en VGA-skärn 640 x 480
 *
 * Sensorerna som avläses på BeMicro 10 kortet är accelerometern,
 * termistorn och ljussensorn
 *
 * Programmerare: Lasse Karagiannis
 * lasse.l.karagiannis@gmail.com
 * 2016-12-29
 *
 */


#include <stdio.h>
#include <system.h>
#include <io.h>
#include <alt_types.h>
#include <BeMicro_VGA_IP_Driver.h>
//#include "font8x8_basic.h"
#include "vga_util.h"
#include "sensor.h"

#include <altera_avalon_timer_regs.h>


#include <string.h>


enum sampling_state  {five_Hz_sampling, one_Hz_sampling,dot2_Hz_sampling};


int main(void)
{
	print_welcome_screen(); 	//"Splashscreen"
	int sub_seconds = 0;  //hjälpvariabel för 5Hz samplingsfrekvens
	enum sampling_state state = one_Hz_sampling;
	static QUEUE q1;
	//QUEUE q2;
	//QUEUE q3;
	static QUEUE q4;
	static QUEUE q5;
	QUEUE* q11 = &q1;
	//QUEUE* q22 = &q2;
	//QUEUE* q33 = &q3;
	QUEUE* q44 = &q4;
	QUEUE* q55 = &q5;



	static SENSOR_OBJECT accelorometerX = //Accelerometer X
		{	"Accelerom. x",
			30, 50,1,0.1,30,4, q1,q11,
			config_time_base,
			init_measurement,
			read_accelerometerX,
			update_graph,
			//&accelorometerX,
			draw_graph
		};

	/*SENSOR_OBJECT accelorometerY =   //Accelerometer Y
					{	"Accelerom. y",
						320/3 +30, 50,1,1,20,4, q2,q22,
						config_time_base,
						init_measurement,
						read_accelerometerY,
						update_graph,
						&accelorometerY,
						draw_graph
					};

	SENSOR_OBJECT accelorometerZ =		//Accelerometer Z
				{	"Accelerom. z",
					2*320/3 +30, 50,1,1,60,4, q3,q33,
					config_time_base,
					init_measurement,
					read_accelerometerZ,
					update_graph,
					&accelorometerZ,
					draw_graph
				};
*/
	static SENSOR_OBJECT temp_sensor =				//Temperatur sensorn
					{	"Temperature",
						30, 180,1,100.0,10,4, q4,q44,
						config_time_base,
						init_measurement,
						read_temp,
						update_graph,
						//&temp_sensor,
						draw_graph
					};

	static SENSOR_OBJECT light_sensor =			//Ljussensorn
						{	"Light",
							320/3 +30, 180,1,100.0,10,4, q5,q55,
							config_time_base,
							init_measurement,
							read_light,
							update_graph,
							//&light_sensor,
							draw_graph
						};

/*SENSOR_OBJECT sensors[5]={accelorometerX,
							accelorometerY,
							accelorometerZ,
							temp_sensor,
							light_sensor};*/

	SENSOR_OBJECT sensors[3]={accelorometerX,		//Array med sensor-objekt
								temp_sensor,
								light_sensor
							  };


//Rutin som rensar skärmen och skriver ut möjliga samplingsfrekvenser
//längst ner till vänster i presentationsfönstret. Borde läggas i en funktion
// av estetiska skäl.
		for(int i = 0; i < 78600; i++)
			set_address_pixel(i, 0);

		print_hline(0,120,320,6);
		print_vline(320/3,0,240,6);
		print_vline(2*320/3,0,240,6);

		print_str(2*320/3 +5,210-60,5,"1st btn 5Hz");
		print_str(2*320/3 +5,210-30,5,"2nd btn 1Hz");
		print_str(2*320/3 +5,210,5,"3d btn .2Hz");
		print_str(2*320/3 +5,230,5,"L.Karagiannis");


//Initiering av sensorerna
		for(int i = 0; i<3; i++)
			sensors[i].init_measurement(&sensors[i]);

	while(1)
	{

//Kolla upp vilken samplingsfrekvens användaren vill ha
		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 6)//first button
			state = five_Hz_sampling;
		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 5)//snd button
			state = one_Hz_sampling;
		if(IORD_32DIRECT(KEY_INPUT_BASE,0) == 3)//third button
					state = dot2_Hz_sampling;

		switch(state)
		{
			case five_Hz_sampling:
#ifdef DEBUG
			alt_printf("5Hz sampling\n");

#endif
//Färga texten för den samplingsfrekvens som valts
			print_str(2*320/3 +5,210-60,2,"1st btn 5Hz");
			print_str(2*320/3 +5,210-30,5,"2nd btn 1Hz");
			print_str(2*320/3 +5,210,5,"3d btn .2Hz");
			TIMER_RESET;
			TIMER_START;
			while(TIMER_READ < 100000);
			sub_seconds++;
			if(sub_seconds == 5)
			{
				update_time(1);
				sub_seconds = 0;
			}

			for(int i = 0; i<3; i++)
			{
				sensors[i].configure_time_base(1,&sensors[i]);//För att illustrera koncept.Onödig.
				sensors[i].read_sensor(sensors[i].q);   	  //Läs sensor
				sensors[i].update_graph(&sensors[i]);		  //Updatera korresponderande graf
			}
			break;

		case one_Hz_sampling:
#ifdef DEBUG
			alt_printf("slow\n");

#endif
//Färga texten för den samplingsfrekvens som valts
			print_str(2*320/3 +5,210-60,5,"1st btn 5Hz");
			print_str(2*320/3 +5,210-30,2,"2nd btn 1Hz");
			print_str(2*320/3 +5,210,5,"3d btn .2Hz");
			TIMER_RESET;
			TIMER_START;
				while(TIMER_READ < 50000000);
				update_time(1);
				TIMER_RESET;
				TIMER_START;

			for(int i = 0; i<3; i++)
			{
				sensors[i].configure_time_base(10,&sensors[i]);//För att illustrera koncept.Onödig.
				sensors[i].read_sensor(sensors[i].q);			//Läs sensor
				sensors[i].update_graph(&sensors[i]);			//Updatera korresponderande graf
			}
           break;


		case dot2_Hz_sampling:
		#ifdef DEBUG
					alt_printf("0.5 sampling rate\n");

		#endif
//Färga texten för den samplingsfrekvens som valts
					print_str(2*320/3 +5,210-60,5,"1st btn 5Hz");
					print_str(2*320/3 +5,210-30,5,"2nd btn 1Hz");
					print_str(2*320/3 +5,210,2,"3d btn .2Hz");
					for(int i = 0; i < 5; i++)
					{
						TIMER_RESET;
						TIMER_START;

						while(TIMER_READ < 50000000);
						update_time(1);
					}


					for(int i = 0; i<3; i++)
					{
						sensors[i].configure_time_base(10,&sensors[i]);//För att illustrera koncept.Onödig.
						sensors[i].read_sensor(sensors[i].q);			//Läs sensor
						sensors[i].update_graph(&sensors[i]);			//Updatera korresponderande graf
					}
		           break;
		}//switch
	}//while

	return 0;
}//main

